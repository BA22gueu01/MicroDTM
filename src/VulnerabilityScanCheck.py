import subprocess
import re


class VulnerabilityScan:

    def __init__(self):
        self.niktoCheckGrade = -20
        self.ssllabsCheckGrade = -20
        self.httpobsCheckGrade = -20

    def ssllabsCheck(self):
        # https://ihateregex.io/expr/ip/
        # Regex for an IPv4 address to find ssllabs grade
        regex = "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}.*"
        output = subprocess.check_output(["/var/TrustCalculation/ssllabs-scan/ssllabs-scan-v3", "-grade", "zhaw.ch"])
        output = output.decode()

        grades = [':\"']

        # result = any(grade in re.search(regex, output.lower()).group(0) for grade in grades)

        # https://www.tutorialspoint.com/extract-only-characters-from-given-string-in-python
        try:
            letter = "".join(re.findall("[a-zA-Z]+", re.search(regex, output.lower()).group(0)))
        except Exception as e:
            return 0

        print("SSLLabCheck: ", letter)

        if 'a' in letter:
            return 5
        elif 'b' in letter:
            return 3
        elif 'c' in letter:
            return 1
        elif 'd' in letter:
            return -1
        elif 'e' in letter:
            return -3
        elif 'f' in letter:
            return -5
        else:
            return -10

    def httpobsCheck(self):
        output = subprocess.check_output(["httpobs", "zhaw.ch"])
        output = output.decode()

        regex = "score.*"
        grades = ['[a]', '[b]', '[c]', '[d]', '[e]', '[f]']

        # result = any(grade in re.search(regex, output.lower()).group(0) for grade in grades)
        try:
            letter = "".join(re.findall("[a-zA-Z]+", re.search(regex, output.lower()).group(0))).replace("score", "")
        except Exception as e:
            return 0

        print("Httpobs: ", letter)

        if 'a' in letter:
            return 5
        elif 'b' in letter:
            return 3
        elif 'c' in letter:
            return 1
        elif 'd' in letter:
            return -1
        elif 'e' in letter:
            return -3
        elif 'f' in letter:
            return -5
        else:
            return -10

    def niktoCheck(self):
        regex = "and [0-9]+ item"

        try:
            output = subprocess.Popen(
                ["python", "/var/TrustCalculation/nikto/nikto-master/program/nikto.pl", "-h", "zhaw.ch"],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output = output.communicate()
        except subprocess.CalledProcessError as e:
            raise RuntimeError("command '{}' return with error (code {}): {}".format(e.cmd, e.returncode, e.output))

        try:
            number = "".join(re.findall("[0-9]+", re.search(regex, output.lower()).group(0)))
        except Exception as e:
            return -10

        print("niktoCheck: ", number)
        return 5 - (min(number / 2, 10))

    def getVulnerabilityScanGrade(self):
        self.niktoCheckGrade = self.niktoCheck()
        self.ssllabsCheckGrade = self.ssllabsCheck()
        self.httpobsCheckGrade = self.httpobsCheck()

        print("niktoCheckGrade: ", self.niktoCheckGrade)
        print("ssllabsCheckGrade: ", self.ssllabsCheckGrade)
        print("httpobsCheckGrade: ", self.httpobsCheckGrade)

        return (self.httpobsCheckGrade + self.ssllabsCheckGrade + self.niktoCheckGrade) / 3

    def getNiktoCheckGrade(self):
        return self.niktoCheckGrade

    def getSsllabsCheckGrade(self):
        return self.ssllabsCheckGrade

    def getHttpobsCheckGrade(self):
        return self.httpobsCheckGrade